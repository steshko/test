const myComboboxTemplate = template<Combobox, ElementDefinitionContext>(
    function(context: ElementDefinitionContext, definition: FoundationElementDefinition) {
        return (
            `<div class=${definition.positioningRegion} role="presentation">
                <div class=${definition.control} role="combobox" aria-haspopup="listbox" aria-expanded=${context.open}>
                    <input
                        class=${definition.input}
                        type="text"
                        role="textbox"
                        autocomplete="off"
                        aria-autocomplete="list"
                        aria-controls=${context.listboxId}
                        aria-activedescendant=${context.ariaActiveDescendant}
                        placeholder=${context.placeholder}
                        disabled=${context.disabled || null}
                        readonly=${context.readonly || null}
                        value=${context.displayValue}
                        onInput=${context.handleTextInput}
                        onFocus=${context.handleFocus}
                        onBlur=${context.handleBlur}
                        onKeydown=${context.handleKeyDown}
                        ref=${context.inputRef}
                    />
                    <span class=${definition.indicator} role="presentation" onClick=${context.handleIndicatorClick}>
                        <slot name="indicator">${context.defaultIndicator}</slot>
                    </span>
                    <span class=${definition.end} role="presentation">
                        <slot name="end"></slot>
                    </span>
                </div>
                <div class=${definition.listPositioningRegion} role="presentation">
                    <ul
                        class=${definition.list}
                        role="listbox"
                        aria-label=${context.label}
                        id=${context.listboxId}
                        hidden=${!context.open}
                        ref=${context.listRef}
                        onKeyDown=${context.handleListKeyDown}
                        onFocus=${context.handleListFocus}
                        onBlur=${context.handleListBlur}
                        onPointerMove=${context.handlePointerMove}
                    >
                        <slot name="options">
                            ${context.options.map((option, index) => (
                                <li
                                    class=${context.getOptionClasses(option, index)}
                                    id=${`${context.listboxId}-option-${index}`}
                                    role="option"
                                    aria-selected=${context.selectedOptions.includes(option)}
                                    onMouseEnter=${() => context.handleOptionHover(option, index)}
                                    onMouseDown=${() => context.handleOptionSelect(option)}
                                    ref=${(el) => context.optionRefs.set(option, el)}
                                >
                                    ${context.getOptionContent(option)}
                                </li>
                            ))}
                        </slot>
                    </ul>
                </div>
            </div>`
        );
    }
);
